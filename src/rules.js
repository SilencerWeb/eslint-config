export const rules = [
  {
    'name': 'for-direction',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Enforce “for” loop update clause moving the counter in the right direction',
    'longDescription': 'A for loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as while loops. More typically, an infinite for loop is a bug.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'getter-return',
    'options': [
      {
        'id': 'cjowikr6722t90a75q4v4vaeo',
        'type': 'boolean',
        'name': 'allowImplicit',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows implicitly returning undefined with a return statement.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Enforce return statements in getters',
    'longDescription': 'This rule enforces that a return statement is present in property getters.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-await-in-loop',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow await inside of loops',
    'longDescription': 'This rule disallows the use of await within loop bodies.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-async-promise-executor',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow using an async function as a Promise executor',
    'longDescription': 'This rule aims to disallow async Promise executor functions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-compare-neg-zero',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow comparing against -0',
    'longDescription': 'The rule should warn against code that tries to compare against -0, since that will not work as intended. That is, code like x === -0 will pass for both +0 and -0. The author probably intended Object.is(x, -0).',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-cond-assign',
    'options': [
      {
        'id': 'cjowikr6722t80a75da4eex2l',
        'type': 'select',
        'name': '',
        'value': 'except-parens',
        'defaultValue': 'except-parens',
        'description': null,
        'options': [
          'except-parens',
          'always',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow assignment operators in conditional expressions',
    'longDescription': 'This rule disallows ambiguous assignment operators in test conditions of if, for, while, and do...while statements.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-control-regex',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow control characters in regular expressions',
    'longDescription': 'This rule disallows control characters in regular expressions.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-constant-condition',
    'options': [
      {
        'id': 'cjowikr6822tc0a754no2pnf1',
        'type': 'boolean',
        'name': 'checkLoops',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows constant expressions in loops.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow constant expressions in conditions',
    'longDescription': 'This rule disallows constant expressions in the test condition of:.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-console',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow the use of console',
    'longDescription': 'This rule disallows calls to methods of the console object.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-debugger',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow the use of debugger',
    'longDescription': 'This rule disallows debugger statements.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-dupe-args',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow duplicate arguments in function definitions',
    'longDescription': 'This rule disallows duplicate parameter names in function declarations or expressions. It does not apply to arrow functions or class methods, because the parser reports the error.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-dupe-keys',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow duplicate keys in object literals',
    'longDescription': 'This rule disallows duplicate keys in object literals.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-duplicate-case',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow duplicate case labels',
    'longDescription': 'This rule disallows duplicate test expressions in case clauses of switch statements.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-empty',
    'options': [
      {
        'id': 'cjowiku6122vg0a75vjkxmekc',
        'type': 'boolean',
        'name': 'allowEmptyCatch',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows empty catch clauses (that is, which do not contain a comment).',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow empty block statements',
    'longDescription': 'This rule disallows empty block statements. This rule ignores block statements which contain a comment (for example, in an empty catch or finally block of a try statement to indicate that execution should continue regardless of errors).',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-empty-character-class',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow empty character classes in regular expressions',
    'longDescription': 'This rule disallows empty character classes in regular expressions.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-ex-assign',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow reassigning exceptions in catch clauses',
    'longDescription': 'This rule disallows reassigning exceptions in catch clauses.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-extra-boolean-cast',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow unnecessary boolean casts',
    'longDescription': 'This rule disallows unnecessary boolean casts.',
    'isRecommended': true,
    'isFixable': true,
  },
  {
    'name': 'no-extra-parens',
    'options': [
      {
        'id': 'cjp11wofjni4r0a03wk62skis',
        'type': 'select',
        'name': '',
        'value': 'all',
        'defaultValue': 'all',
        'description': null,
        'options': [
          'all',
          'functions',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow unnecessary parentheses',
    'longDescription': 'This rule always ignores extra parentheses around the following:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-extra-semi',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow unnecessary semicolons',
    'longDescription': 'This rule disallows unnecessary semicolons.',
    'isRecommended': true,
    'isFixable': true,
  },
  {
    'name': 'no-func-assign',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow reassigning function declarations',
    'longDescription': 'This rule disallows reassigning function declarations.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-inner-declarations',
    'options': [
      {
        'id': 'cjowikzkg22zw0a75gggpkvr9',
        'type': 'select',
        'name': '',
        'value': 'functions',
        'defaultValue': 'functions',
        'description': null,
        'options': [
          'functions',
          'both',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow variable or function declarations in nested blocks',
    'longDescription': 'This rule requires that function declarations and, optionally, variable declarations be in the root of a program or the body of a function.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-invalid-regexp',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow invalid regular expression strings in RegExp constructors',
    'longDescription': 'This rule disallows invalid regular expression strings in RegExp constructors.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-irregular-whitespace',
    'options': [
      {
        'id': 'cjowil144230t0a75osxsudj6',
        'type': 'boolean',
        'name': 'skipComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows any whitespace characters in comments.',
        'options': [],
      },
      {
        'id': 'cjowil147230v0a75ysh5ndcg',
        'type': 'boolean',
        'name': 'skipStrings',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Allows any whitespace characters in string literals.',
        'options': [],
      },
      {
        'id': 'cjowil14a230x0a7575bvw4fk',
        'type': 'boolean',
        'name': 'skipTemplates',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows any whitespace characters in template literals.',
        'options': [],
      },
      {
        'id': 'cjowil14c230z0a752dofookg',
        'type': 'boolean',
        'name': 'skipRegExps',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows any whitespace characters in regular expression literals.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow irregular whitespace outside of strings and comments',
    'longDescription': 'This rule is aimed at catching invalid whitespace that is not a normal tab and space. Some of these characters may cause issues in modern browsers and others will be a debugging issue to spot.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-misleading-character-class',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow characters which are made with multiple code points in character class syntax',
    'longDescription': 'This rule reports the regular expressions which include multiple code point characters in character class syntax.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-obj-calls',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow calling global object properties as functions',
    'longDescription': 'This rule disallows calling the Math, JSON and Reflect objects as functions.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-prototype-builtins',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow calling some Object.prototype methods directly on objects',
    'longDescription': 'This rule disallows calling some Object.prototype methods directly on object instances.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-regex-spaces',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow multiple spaces in regular expressions',
    'longDescription': 'This rule disallows multiple spaces in regular expression literals.',
    'isRecommended': true,
    'isFixable': true,
  },
  {
    'name': 'no-sparse-arrays',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow sparse arrays',
    'longDescription': 'This rule disallows sparse array literals which have “holes” where commas are not preceded by elements. It does not apply to a trailing comma following the last element.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-template-curly-in-string',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow template literal placeholder syntax in regular strings',
    'longDescription': 'This rule aims to warn when a regular string contains what looks like a template literal placeholder. It will warn when it finds a string containing the template literal place holder (${something}) that uses either " or \' for the quotes.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-unexpected-multiline',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow confusing multiline expressions',
    'longDescription': 'This rule disallows confusing multiline expressions where a newline looks like it is ending a statement, but is not.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-unreachable',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow unreachable code after return, throw, continue, and break statements',
    'longDescription': 'This rule disallows unreachable code after return, throw, continue, and break statements.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-unsafe-finally',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow control flow statements in finally blocks',
    'longDescription': 'This rule disallows return, throw, break, and continue statements inside finally blocks. It allows indirect usages, such as in function or class definitions.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-unsafe-negation',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow negating the left operand of relational operators',
    'longDescription': 'This rule disallows negating the left operand of Relational Operators.',
    'isRecommended': true,
    'isFixable': true,
  },
  {
    'name': 'require-atomic-updates',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Disallow assignments that can lead to race conditions due to usage of await or yield',
    'longDescription': 'This rule aims to report assignments to variables or properties where all of the following are true:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'use-isnan',
    'options': [],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Require calls to isNaN() when checking for NaN',
    'longDescription': 'This rule disallows comparisons to ‘NaN’.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'valid-jsdoc',
    'options': [
      {
        'id': 'cjp12fa4snntp0a03q8246r17',
        'type': 'boolean',
        'name': 'requireReturnType',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows missing type in return tags.',
        'options': [],
      },
      {
        'id': 'cjp12fjtcnnvm0a03c6ss58mt',
        'type': 'boolean',
        'name': 'requireParamDescription',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows missing description in parameter tags.',
        'options': [],
      },
      {
        'id': 'cjp12ful0nnyc0a03tk9uvvad',
        'type': 'boolean',
        'name': 'requireReturnDescription',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows missing description in return tags.',
        'options': [],
      },
      {
        'id': 'cjp12g3veno060a03707p8utq',
        'type': 'boolean',
        'name': 'requireParamType',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows missing type in parameter tags.',
        'options': [],
      },
      {
        'id': 'cjp2o97aod2x90a03u2ql2dh9',
        'type': 'boolean',
        'name': 'requireReturn',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Disallows missing type in parameter tags.',
        'options': [],
      },
      {
        'id': 'cjp2o9xixd3ed0a0390wrt94x',
        'type': 'string',
        'name': 'matchDescription',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to match the description in each JSDoc comment.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Enforce valid JSDoc comments',
    'longDescription': 'This rule enforces valid and consistent JSDoc comments. It reports any of the following problems:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'valid-typeof',
    'options': [
      {
        'id': 'cjowilbwx23970a7588degr4g',
        'type': 'boolean',
        'name': 'requireStringLiterals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires typeof expressions to only be compared to string literals or other typeof expressions, and disallows comparisons to any other value.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Possible Errors',
    'shortDescription': 'Enforce comparing typeof expressions against valid strings',
    'longDescription': 'This rule enforces comparing typeof expressions to valid string literals.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'accessor-pairs',
    'options': [
      {
        'id': 'cjowilcos239x0a75ey55qtsk',
        'type': 'boolean',
        'name': 'getWithoutSet',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Warns for getters without setters.',
        'options': [],
      },
      {
        'id': 'cjowilcou23a10a75snkt5zyr',
        'type': 'boolean',
        'name': 'setWithoutGet',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Warns for setters without getters.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce getter and setter pairs in objects',
    'longDescription': 'This rule enforces a style where it requires to have a getter for every property which has a setter defined.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'array-callback-return',
    'options': [
      {
        'id': 'cjowildgi23ap0a75l00prpm9',
        'type': 'boolean',
        'name': 'allowImplicit',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows implicitly returning undefined with a return statement containing no expression.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce return statements in callbacks of array methods',
    'longDescription': 'This rule finds callback functions of the following methods, then checks usage of return statement.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'block-scoped-var',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce the use of variables within the scope they are defined',
    'longDescription': 'This rule aims to reduce the usage of variables outside of their binding context and emulate traditional block scope from other languages. This is to help newcomers to the language avoid difficult bugs with variable hoisting.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'class-methods-use-this',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce that class methods utilize this',
    'longDescription': 'This rule is aimed to flag class methods that do not use this.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'complexity',
    'options': [
      {
        'id': 'cjp3rs0xot5540a03ube8nu6i',
        'type': 'number',
        'name': 'max',
        'value': '20',
        'defaultValue': '20',
        'description': 'Specifies a cyclomatic complexity threshold.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce a maximum cyclomatic complexity allowed in a program',
    'longDescription': 'This rule is aimed at reducing code complexity by capping the amount of cyclomatic complexity allowed in a program. As such, it will warn when the cyclomatic complexity crosses the configured threshold (default is 20).',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'consistent-return',
    'options': [
      {
        'id': 'cjowilgjl23d40a75dsyf8gup',
        'type': 'boolean',
        'name': 'treatUndefinedAsUnspecified',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows either specify values or return undefined explicitly or implicitly.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require return statements to either always or never specify values',
    'longDescription': 'This rule requires return statements to either always or never specify values. This rule ignores function definitions where the name begins with an uppercase letter, because constructors (when invoked with the new operator) return the instantiated object implicitly if they do not return another object explicitly.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'curly',
    'options': [
      {
        'id': 'cjp14wipvohzu0a03por9g4g7',
        'type': 'select',
        'name': '',
        'value': 'all',
        'defaultValue': 'all',
        'description': null,
        'options': [
          'all',
          'multi',
          'multi-line',
          'multi-or-nest',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce consistent brace style for all control statements',
    'longDescription': 'This rule is aimed at preventing bugs and increasing code clarity by ensuring that block statements are wrapped in curly braces. It will warn when it encounters blocks that omit curly braces.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'default-case',
    'options': [
      {
        'id': 'cjowili3523ea0a75wf2qwq9f',
        'type': 'string',
        'name': 'commentPattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to change the default /^no default$/i comment test pattern.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require default cases in switch statements',
    'longDescription': 'This rule aims to require default case in switch statements. You may optionally include a // no default after the last case if there is no default case. The comment may be in any desired case, such as // No Default.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'dot-location',
    'options': [
      {
        'id': 'cjowiliuz23f40a758ojyhsz5',
        'type': 'select',
        'name': '',
        'value': 'object',
        'defaultValue': 'object',
        'description': null,
        'options': [
          'object',
          'property',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce consistent newlines before and after dots',
    'longDescription': 'This rule aims to enforce newline consistency in member expressions. This rule prevents the use of mixed newlines around the dot in a member expression.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'dot-notation',
    'options': [
      {
        'id': 'cjowiljmp23ft0a751wibf4wj',
        'type': 'boolean',
        'name': 'allowKeywords',
        'value': 'true',
        'defaultValue': 'true',
        'description': null,
        'options': [],
      },
      {
        'id': 'cjowiljmq23fv0a75men4tn2k',
        'type': 'string',
        'name': 'allowPattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to allow bracket notation for property names that match a pattern.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce dot notation whenever possible',
    'longDescription': 'This rule is aimed at maintaining code consistency and improving code readability by encouraging use of the dot notation style whenever possible. As such, it will warn when it encounters an unnecessary use of square-bracket notation.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'eqeqeq',
    'options': [
      {
        'id': 'cjp151pksojfq0a03fuopggxq',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'smart',
          'allow-null',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require the use of === and !==',
    'longDescription': 'This rule is aimed at eliminating the type-unsafe equality operators.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'guard-for-in',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require for-in loops to include an if statement',
    'longDescription': 'This rule is aimed at preventing unexpected behavior that could arise from using a for in loop without filtering the results in the loop. As such, it will warn when for in loops do not filter their results with an if statement.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-classes-per-file',
    'options': [
      {
        'id': 'cjp3s6rattb7s0a03z3tc29em',
        'type': 'number',
        'name': '',
        'value': '1',
        'defaultValue': '1',
        'description': 'Specifies the maximum number of classes.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce a maximum number of classes per file',
    'longDescription': 'This rule enforces that each file may contain only a particular number\nof classes and no more.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-alert',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of alert, confirm, and prompt',
    'longDescription': 'This rule is aimed at catching debugging code that should be removed and popup UI elements that should be replaced with less obtrusive, custom UIs. As such, it will warn when it encounters alert, prompt, and confirm function calls which are not shadowed.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-caller',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of arguments.caller or arguments.callee',
    'longDescription': 'This rule is aimed at discouraging the use of deprecated and sub-optimal code, but disallowing the use of arguments.caller and arguments.callee. As such, it will warn when arguments.caller and arguments.callee are used.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-case-declarations',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow lexical declarations in case clauses',
    'longDescription': 'This rule aims to prevent access to uninitialized lexical bindings as well as accessing hoisted functions across case clauses.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-div-regex',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow division operators explicitly at the beginning of regular expressions',
    'longDescription': 'This is used to disambiguate the division operator to not confuse users.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-else-return',
    'options': [
      {
        'id': 'cjowilpsz23l00a75rdljerru',
        'type': 'boolean',
        'name': 'allowElseIf',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Allows else if blocks after a return.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow else blocks after return statements in if statements',
    'longDescription': 'This rule is aimed at highlighting an unnecessary block of code following an if containing a return statement. As such, it will warn when it encounters an else following a chain of ifs, all of them containing a return statement.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-empty-function',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow empty functions',
    'longDescription': 'This rule is aimed at eliminating empty functions.\nA function will not be considered a problem if it contains a comment.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-empty-pattern',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow empty destructuring patterns',
    'longDescription': 'This rule aims to flag any empty patterns in destructured objects and arrays, and as such, will report a problem whenever one is encountered.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-eq-null',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow null comparisons without type-checking operators',
    'longDescription': 'The no-eq-null rule aims reduce potential bug and unwanted behavior by ensuring that comparisons to null only match null, and not also undefined. As such it will flag comparisons to null when using == and !=.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-eval',
    'options': [
      {
        'id': 'cjowilsw323nj0a75ip01ukjx',
        'type': 'boolean',
        'name': 'allowIndirect',
        'value': 'false',
        'defaultValue': 'false',
        'description': null,
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of eval()',
    'longDescription': 'This rule is aimed at preventing potentially dangerous, unnecessary, and slow code by disallowing the use of the eval() function. As such, it will warn whenever the eval() function is used.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-extend-native',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow extending native types',
    'longDescription': 'Disallows directly modifying the prototype of builtin objects.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-extra-bind',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary calls to .bind()',
    'longDescription': 'This rule is aimed at avoiding the unnecessary use of bind() and as such will warn whenever an immediately-invoked function expression (IIFE) is using bind() and doesn’t have an appropriate this value. This rule won’t flag usage of bind() that includes function argument binding.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-extra-label',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary labels',
    'longDescription': 'This rule is aimed at eliminating unnecessary labels.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-fallthrough',
    'options': [
      {
        'id': 'cjowilvz723q10a75oyagx46v',
        'type': 'string',
        'name': 'commentPattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to change the test for intentional fallthrough comment.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow fallthrough of case statements',
    'longDescription': 'This rule is aimed at eliminating unintentional fallthrough of one case to the other. As such, it flags any fallthrough scenarios that are not marked by a comment.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-floating-decimal',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow leading or trailing decimal points in numeric literals',
    'longDescription': 'This rule is aimed at eliminating floating decimal points and will warn whenever a numeric value has a decimal point but is missing a number either before or after it.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-global-assign',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow assignments to native objects or read-only global variables',
    'longDescription': 'This rule disallows modifications to read-only global variables.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-implicit-coercion',
    'options': [
      {
        'id': 'cjowilyah23s50a75q5byomsg',
        'type': 'boolean',
        'name': 'boolean',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Warns shorter type conversions for boolean type.',
        'options': [],
      },
      {
        'id': 'cjowilyak23s70a75e97m12zs',
        'type': 'boolean',
        'name': 'number',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Warns shorter type conversions for number type.',
        'options': [],
      },
      {
        'id': 'cjowilyan23s90a755qjeakb7',
        'type': 'boolean',
        'name': 'string',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Warns shorter type conversions for string type.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow shorthand type conversions',
    'longDescription': 'This rule is aimed to flag shorter notations for the type conversion, then suggest a more self-explanatory notation.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-implicit-globals',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow variable and function declarations in the global scope',
    'longDescription': 'This rule disallows var and named function declarations at the top-level script scope. This does not apply to ES and CommonJS modules since they have a module scope.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-implied-eval',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of eval()-like methods',
    'longDescription': 'This rule aims to eliminate implied eval() through the use of setTimeout(), setInterval() or execScript(). As such, it will warn when either function is used with a string as the first argument.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-invalid-this',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow this keywords outside of classes or class-like objects',
    'longDescription': 'This rule aims to flag usage of this keywords outside of classes or class-like objects.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-iterator',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of the __iterator__ property',
    'longDescription': 'This rule is aimed at preventing errors that may arise from using the __iterator__ property, which is not implemented in several browsers. As such, it will warn whenever it encounters the __iterator__ property.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-labels',
    'options': [
      {
        'id': 'cjowim25f23vq0a75klpuwybb',
        'type': 'boolean',
        'name': 'allowLoop',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores labels which are sticking to loop statements.',
        'options': [],
      },
      {
        'id': 'cjowim25i23vs0a75iicdzsu0',
        'type': 'boolean',
        'name': 'allowSwitch',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores labels which are sticking to switch statements.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow labeled statements',
    'longDescription': 'This rule aims to eliminate the use of labeled statements in JavaScript. It will warn whenever a labeled statement is encountered and whenever break or continue are used with a label.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-lone-blocks',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary nested blocks',
    'longDescription': 'This rule aims to eliminate unnecessary and potentially confusing blocks at the top level of a script or within other blocks.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-loop-func',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow function declarations and expressions inside loop statements',
    'longDescription': 'This error is raised to highlight a piece of code that may not work as you expect it to and could also indicate a misunderstanding of how the language works. Your code may run without any problems if you do not fix this error, but in some situations it could behave unexpectedly.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-magic-numbers',
    'options': [
      {
        'id': 'cjowim4gq23xb0a75t7q9xvsx',
        'type': 'boolean',
        'name': 'detectObjects',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Detects numbers when setting object properties.',
        'options': [],
      },
      {
        'id': 'cjowim4gt23xd0a75kzzdkzeb',
        'type': 'boolean',
        'name': 'enforceConst',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Checks for the const keyword in variable declaration of numbers.',
        'options': [],
      },
      {
        'id': 'cjowim4gv23xf0a75yuf3alut',
        'type': 'boolean',
        'name': 'ignoreArrayIndexes',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores numbers used as array indexes.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow magic numbers',
    'longDescription': 'The no-magic-numbers rule aims to make code more readable and refactoring easier by ensuring that special numbers\nare declared as constants to make their meaning explicit.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-multi-spaces',
    'options': [
      {
        'id': 'cjp15bkkvon5n0a03lxspdy83',
        'type': 'boolean',
        'name': 'ignoreEOLComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores multiple spaces before comments that occur at the end of lines.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow multiple spaces',
    'longDescription': 'This rule aims to disallow multiple whitespace around logical expressions, conditional expressions, declarations, array elements, object properties, sequences and function parameters.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-multi-str',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow multiline strings',
    'longDescription': 'This rule is aimed at preventing the use of multiline strings.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow new operators outside of assignments or comparisons',
    'longDescription': 'This rule is aimed at maintaining consistency and convention by disallowing constructor calls using the new keyword that do not assign the resulting object to a variable.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new-func',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow new operators with the Function object',
    'longDescription': 'This error is raised to highlight the use of a bad practice. By passing a string to the Function constructor, you are requiring the engine to parse that string much in the way it has to when you call the eval function.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new-wrappers',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow new operators with the String, Number, and Boolean objects',
    'longDescription': 'This rule aims to eliminate the use of String, Number, and Boolean with the new operator. As such, it warns whenever it sees new String, new Number, or new Boolean.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-octal',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow octal literals',
    'longDescription': 'The rule disallows octal literals.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-octal-escape',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow octal escape sequences in string literals',
    'longDescription': 'This rule disallows octal escape sequences in string literals.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-param-reassign',
    'options': [
      {
        'id': 'cjp15ejf4ootc0a0372470v7o',
        'type': 'boolean',
        'name': 'props',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Warns against the modification of parameter properties.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow reassigning function parameters',
    'longDescription': 'This rule aims to prevent unintended behavior caused by modification or reassignment of function parameters.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-proto',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow the use of the __proto__ property',
    'longDescription': 'When an object is created __proto__ is set to the original prototype property of the object’s constructor function. getPrototypeOf is the preferred method of getting “the prototype”.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-redeclare',
    'options': [
      {
        'id': 'cjowimc6j243x0a75xspf0ota',
        'type': 'boolean',
        'name': 'builtinGlobals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Checks for redeclaration of built-in globals in global scope.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow variable redeclaration',
    'longDescription': 'This rule is aimed at eliminating variables that have multiple declarations in the same scope.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-restricted-properties',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow certain properties on certain objects',
    'longDescription': 'This rule looks for accessing a given property key on a given object name, either when reading the property’s value or invoking it as a function. You may specify an optional message to indicate an alternative API or a reason for the restriction.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-return-await',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary return await',
    'longDescription': 'This rule aims to prevent a likely common performance hazard due to a lack of understanding of the semantics of async function.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-script-url',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow javascript: urls',
    'longDescription': 'Examples of incorrect code for this rule:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-return-assign',
    'options': [
      {
        'id': 'cjowimy3i24nk0a75yol2p8hs',
        'type': 'select',
        'name': '',
        'value': 'except-parens',
        'defaultValue': 'except-parens',
        'description': null,
        'options': [
          'except-parens',
          'always',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow assignment operators in return statements',
    'longDescription': 'This rule aims to eliminate assignments from return statements. As such, it will warn whenever an assignment is found as part of return.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-self-assign',
    'options': [
      {
        'id': 'cjowimy3i24nj0a75kgolx662',
        'type': 'boolean',
        'name': 'props',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Warns self-assignments of properties.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow assignments where both sides are exactly the same',
    'longDescription': 'This rule is aimed at eliminating self assignments.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-self-compare',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow comparisons where both sides are exactly the same',
    'longDescription': 'This error is raised to highlight a potentially confusing and potentially pointless piece of code. There are almost no situations in which you would need to compare something to itself.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-sequences',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow comma operators',
    'longDescription': 'This rule forbids the use of the comma operator, with the following exceptions:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-throw-literal',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow throwing literals as exceptions',
    'longDescription': 'This rule is aimed at maintaining consistency when throwing exception by disallowing to throw literals and other expressions which cannot possibly be an Error object.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-unmodified-loop-condition',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unmodified loop conditions',
    'longDescription': 'This rule finds references which are inside of loop conditions, then checks the\nvariables of those references are modified in the loop.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-unused-labels',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unused labels',
    'longDescription': 'This rule is aimed at eliminating unused labels.',
    'isRecommended': true,
    'isFixable': true,
  },
  {
    'name': 'no-unused-expressions',
    'options': [
      {
        'id': 'cjowimy3v24nm0a75nj8uwob4',
        'type': 'boolean',
        'name': 'allowShortCircuit',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows to use short circuit evaluations in the expressions.',
        'options': [],
      },
      {
        'id': 'cjowimy3y24no0a75ashydrke',
        'type': 'boolean',
        'name': 'allowTernary',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows to use ternary operators in the expressions similarly to short circuit evaluations.',
        'options': [],
      },
      {
        'id': 'cjowimy4024nq0a758lqs2h0n',
        'type': 'boolean',
        'name': 'allowTaggedTemplates',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows to use tagged template literals in the expressions.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unused expressions',
    'longDescription': 'This rule aims to eliminate unused expressions which have no effect on the state of the program.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-useless-call',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary calls to .call() and .apply()',
    'longDescription': 'This rule is aimed to flag usage of Function.prototype.call() and Function.prototype.apply() that can be replaced with the normal function invocation.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-useless-catch',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary catch clauses',
    'longDescription': 'This rule reports catch clauses that only throw the caught error.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-useless-concat',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary concatenation of literals or template literals',
    'longDescription': 'This rule aims to flag the concatenation of 2 literals when they could be combined into a single literal. Literals can be strings or template literals.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-useless-escape',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow unnecessary escape characters',
    'longDescription': 'This rule flags escapes that can be safely removed without changing behavior.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-useless-return',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow redundant return statements',
    'longDescription': 'This rule aims to report redundant return statements.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-void',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow void operators',
    'longDescription': 'This rule aims to eliminate use of void operator.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-warning-comments',
    'options': [
      {
        'id': 'cjp3svz17tmxq0a03sku76gv7',
        'type': 'select',
        'name': 'location',
        'value': 'start',
        'defaultValue': 'start',
        'description': null,
        'options': [
          'start',
          'anywhere',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow specified warning terms in comments',
    'longDescription': 'This rule reports comments that include any of the predefined terms specified in its configuration.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-with',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow with statements',
    'longDescription': 'This rule disallows with statements.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'prefer-promise-reject-errors',
    'options': [
      {
        'id': 'cjowin3yh24tu0a75nk0f8ecq',
        'type': 'boolean',
        'name': 'allowEmptyReject',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows calls to Promise.reject() with no arguments.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require using Error objects as Promise rejection reasons',
    'longDescription': 'This rule aims to ensure that Promises are only rejected with Error objects.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'radix',
    'options': [
      {
        'id': 'cjowin4q924uk0a75zwc31jsn',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'as-needed',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce the consistent use of the radix argument when using parseInt()',
    'longDescription': 'This rule is aimed at preventing the unintended conversion of a string to a number of a different base than intended or at preventing the redundant 10 radix if targeting modern environments only.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'require-await',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Disallow async functions which have no await expression',
    'longDescription': 'This rule warns async functions which have no await expression.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'require-unicode-regexp',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Enforce the use of u flag on RegExp',
    'longDescription': 'This rule aims to enforce the use of u flag on regular expressions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'vars-on-top',
    'options': [],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require var declarations be placed at the top of their containing scope',
    'longDescription': 'This rule aims to keep all variable declarations in the leading series of statements.\nAllowing multiple declarations helps promote maintainability and is thus allowed.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'wrap-iife',
    'options': [
      {
        'id': 'cjowin7tg24xd0a751all041f',
        'type': 'select',
        'name': '',
        'value': 'outside',
        'defaultValue': 'outside',
        'description': null,
        'options': [
          'outside',
          'inside',
          'any',
        ],
      },
      {
        'id': 'cjowin7tk24xf0a75jlr1kir4',
        'type': 'boolean',
        'name': 'functionPrototypeMethods',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Additionally enforces wrapping function expressions invoked using .call and .apply.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require parentheses around immediate function invocations',
    'longDescription': 'This rule requires all immediately-invoked function expressions to be wrapped in parentheses.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'yoda',
    'options': [
      {
        'id': 'cjowin8l724y60a75w4b79z61',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Best Practices',
    'shortDescription': 'Require or disallow “Yoda” conditions',
    'longDescription': 'This rule aims to enforce consistent style of conditions which compare a variable to a literal value.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'strict',
    'options': [
      {
        'id': 'cjowin9d024yw0a75z9mgqah0',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'never',
          'global',
          'function',
          'safe',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Strict Mode',
    'shortDescription': 'Require or disallow strict mode directives',
    'longDescription': 'This rule requires or disallows strict mode directives.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'init-declarations',
    'options': [
      {
        'id': 'cjp15qrlpot7c0a03iwcofiv9',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Require or disallow initialization in variable declarations',
    'longDescription': 'This rule is aimed at enforcing or eliminating variable initializations during declaration. For example, in the following code, foo is initialized during declaration, while bar is not.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-delete-var',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow deleting variables',
    'longDescription': 'This rule disallows the use of the delete operator on variables.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-label-var',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow labels that share a name with a variable',
    'longDescription': 'This rule aims to create clearer code by disallowing the bad practice of creating a label that shares a name with a variable that is in scope.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-restricted-globals',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow specified global variables',
    'longDescription': 'This rule allows you to specify global variable names that you don’t want to use in your application.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-shadow',
    'options': [
      {
        'id': 'cjowind7v252z0a7514rfol08',
        'type': 'boolean',
        'name': 'builtinGlobals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Prevents shadowing of built-in global variables.',
        'options': [],
      },
      {
        'id': 'cjp15u5kvovmu0a03t8rmjuxa',
        'type': 'select',
        'name': 'hoist',
        'value': 'functions',
        'defaultValue': 'functions',
        'description': null,
        'options': [
          'functions',
          'all',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow variable declarations from shadowing variables declared in the outer scope',
    'longDescription': 'This rule aims to eliminate shadowed variable declarations.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-shadow-restricted-names',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow identifiers from shadowing restricted names',
    'longDescription': 'Examples of incorrect code for this rule:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-undef',
    'options': [
      {
        'id': 'cjowinere25450a75isouwekg',
        'type': 'boolean',
        'name': 'typeof',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Warns for variables used inside typeof check.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow the use of undeclared variables unless mentioned in /*global */ comments',
    'longDescription': 'Any reference to an undeclared variable causes a warning, unless the variable is explicitly mentioned in a /*global ...*/ comment, or specified in the globals key in the configuration file. A common use case for these is if you intentionally use globals that are defined elsewhere (e.g. in a script sourced from HTML).',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-undef-init',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow initializing variables to undefined',
    'longDescription': 'This rule aims to eliminate variable declarations that initialize to undefined.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-undefined',
    'options': [],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow the use of undefined as an identifier',
    'longDescription': 'This rule aims to eliminate the use of undefined, and as such, generates a warning whenever it is used.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-unused-vars',
    'options': [
      {
        'id': 'cjp15y68oowdq0a03gzmxzghs',
        'type': 'select',
        'name': 'vars',
        'value': 'all',
        'defaultValue': 'all',
        'description': null,
        'options': [
          'all',
          'local',
        ],
      },
      {
        'id': 'cjp162m20owxq0a03dphlllmi',
        'type': 'string',
        'name': 'varsIgnorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression not to check for usage matching variables.',
        'options': [],
      },
      {
        'id': 'cjp163kn8oxa60a03iljwlk0f',
        'type': 'select',
        'name': 'args',
        'value': 'after-used',
        'defaultValue': 'after-used',
        'description': null,
        'options': [
          'after-used',
          'all',
          'none',
        ],
      },
      {
        'id': 'cjp16470loxmk0a0317686nbt',
        'type': 'boolean',
        'name': 'ignoreRestSiblings',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores the rest property’s siblings.',
        'options': [],
      },
      {
        'id': 'cjp164togoy3s0a032xrsyb2l',
        'type': 'string',
        'name': 'argsIgnorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression not to check for usage matching arguments.',
        'options': [],
      },
      {
        'id': 'cjp165bgioyi30a03o2t78ye7',
        'type': 'select',
        'name': 'caughtErrors',
        'value': 'none',
        'defaultValue': 'none',
        'description': null,
        'options': [
          'none',
          'all',
        ],
      },
      {
        'id': 'cjp165tejoyuj0a03pg724et2',
        'type': 'string',
        'name': 'caughtErrorsIgnorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression not to check for usage matching catch arguments.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow unused variables',
    'longDescription': 'This rule is aimed at eliminating unused variables, functions, and parameters of functions.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-use-before-define',
    'options': [
      {
        'id': 'cjp15wrmsow800a03cjdswbut',
        'type': 'boolean',
        'name': 'functions',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Checks function declarations.',
        'options': [],
      },
      {
        'id': 'cjp15wvizow8i0a03jqn4mjxu',
        'type': 'boolean',
        'name': 'classes',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Checks class declarations.',
        'options': [],
      },
      {
        'id': 'cjp15wzopow900a03gurlm7sk',
        'type': 'boolean',
        'name': 'variables',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Checks variable declarations.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Variables',
    'shortDescription': 'Disallow the use of variables before they are defined',
    'longDescription': 'This rule will warn when it encounters a reference to an identifier that has not yet been declared.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'callback-return',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Require return statements after callbacks',
    'longDescription': 'This rule is aimed at ensuring that callbacks used outside of the main function block are always part-of or immediately\npreceding a return statement. This rule decides what is a callback based on the name of the function being called.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'global-require',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Require require() calls to be placed at top-level module scope',
    'longDescription': 'This rule requires all calls to require() to be at the top level of the module, similar to ES6 import and export statements, which also can occur only at the top level.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'handle-callback-err',
    'options': [
      {
        'id': 'cjp1686vbozyq0a035ypk3vs9',
        'type': 'string',
        'name': '',
        'value': 'err',
        'defaultValue': 'err',
        'description': 'Specifies the name of the error parameter.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Require error handling in callbacks',
    'longDescription': 'This rule expects that when you’re using the callback pattern in Node.js you’ll handle the error.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-buffer-constructor',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow use of the Buffer() constructor',
    'longDescription': 'This rule disallows calling and constructing the Buffer() constructor.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-mixed-requires',
    'options': [
      {
        'id': 'cjp169osrp0k00a03o8p2fjqn',
        'type': 'boolean',
        'name': 'grouping',
        'value': 'false',
        'defaultValue': 'false',
        'description': null,
        'options': [],
      },
      {
        'id': 'cjp169tcjp0lb0a033eh23kwk',
        'type': 'boolean',
        'name': 'allowCall',
        'value': 'false',
        'defaultValue': 'false',
        'description': null,
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow require calls to be mixed with regular variable declarations',
    'longDescription': 'When this rule is enabled, each var statement must satisfy the following conditions:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new-require',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow new operators with calls to require',
    'longDescription': 'This rule aims to eliminate use of the new require expression.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-path-concat',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow string concatenation with __dirname and __filename',
    'longDescription': 'This rule aims to prevent string concatenation of directory paths in Node.js.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-process-env',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow the use of process.env',
    'longDescription': 'This rule is aimed at discouraging use of process.env to avoid global dependencies. As such, it will warn whenever process.env is used.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-process-exit',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow the use of process.exit()',
    'longDescription': 'This rule aims to prevent the use of process.exit() in Node.js JavaScript. As such, it warns whenever process.exit() is found in code.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-restricted-modules',
    'options': [],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow specified modules when loaded by require',
    'longDescription': 'This rule allows you to specify modules that you don’t want to use in your application.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-sync',
    'options': [
      {
        'id': 'cjowinqc325fi0a75i4dclpbn',
        'type': 'boolean',
        'name': 'allowAtRootLevel',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows synchronous methods at the top level of a file, outside of any functions.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Node.js and CommonJS',
    'shortDescription': 'Disallow synchronous methods',
    'longDescription': 'This rule is aimed at preventing synchronous methods from being called in Node.js. It looks specifically for the method suffix “Sync” (as is the convention with Node.js operations).',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'array-bracket-newline',
    'options': [
      {
        'id': 'cjp17v32ppki20a038by8vf8h',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
          'consistent',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce linebreaks after opening and before closing array brackets',
    'longDescription': 'This rule enforces line breaks after opening and before closing array brackets.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'array-bracket-spacing',
    'options': [
      {
        'id': 'cjowinrvm25h40a75fkduv9hn',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
      {
        'id': 'cjowinrvq25h60a75k5gw1qkg',
        'type': 'boolean',
        'name': 'singleValue',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces or newlines inside brackets of array literals that contain a single element.',
        'options': [],
      },
      {
        'id': 'cjowinrvt25h80a75hhqnoqj6',
        'type': 'boolean',
        'name': 'objectsInArrays',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces or newlines between brackets of array literals and braces of their object literal elements [ { or } ].',
        'options': [],
      },
      {
        'id': 'cjowinrvw25ha0a75ixboqn0v',
        'type': 'boolean',
        'name': 'arraysInArrays',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces or newlines between brackets of array literals and brackets of their array literal elements [ [ or ] ].',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing inside array brackets',
    'longDescription': 'This rule enforces consistent spacing inside array brackets.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'array-element-newline',
    'options': [
      {
        'id': 'cjp17y2iypm0h0a03dhvqq024',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
          'consistent',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce line breaks after each array element',
    'longDescription': 'This rule enforces line breaks between array elements.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'block-spacing',
    'options': [
      {
        'id': 'cjowintf425ih0a75f2vra4jr',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow or enforce spaces inside of blocks after opening block and before closing block',
    'longDescription': 'This rule enforces consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'brace-style',
    'options': [
      {
        'id': 'cjowinu6z25j20a75oxb7nv0p',
        'type': 'select',
        'name': '',
        'value': '1tbs',
        'defaultValue': '1tbs',
        'description': null,
        'options': [
          '1tbs',
          'stroustrup',
          'allman',
        ],
      },
      {
        'id': 'cjowinu7425j40a75d4yabavf',
        'type': 'boolean',
        'name': 'allowSingleLine',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows the opening and closing braces for a block to be on the same line.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent brace style for blocks',
    'longDescription': 'This rule enforces consistent brace style for blocks.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'camelcase',
    'options': [
      {
        'id': 'cjowinuyr25jx0a7509cuiix8',
        'type': 'boolean',
        'name': 'ignoreDestructuring',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores destructured identifiers.',
        'options': [],
      },
      {
        'id': 'cjp180djfpna80a030ptvazg4',
        'type': 'select',
        'name': 'properties',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce camelcase naming convention',
    'longDescription': 'This rule looks for any underscores (_) located within the source code. It ignores leading and trailing underscores and only checks those in the middle of a variable name. If ESLint decides that the variable is a constant (all uppercase), then no warning will be thrown. Otherwise, a warning will be thrown. This rule only flags definitions and assignments but not function calls. In case of ES6 import statements, this rule only targets the name of the variable that will be imported into the local module scope.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'capitalized-comments',
    'options': [
      {
        'id': 'cjowinvqj25km0a751l4lkc1o',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
      {
        'id': 'cjp3w4pfov8jv0a036vscuwbo',
        'type': 'string',
        'name': 'ignorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore words that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjp3w4xecv8nd0a03xdsa0nqj',
        'type': 'boolean',
        'name': 'ignoreInlineComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores inline comments.',
        'options': [],
      },
      {
        'id': 'cjp3w50pnv8oz0a03y0ekd839',
        'type': 'boolean',
        'name': 'ignoreConsecutiveComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores comments that follow another comment.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce or disallow capitalization of the first letter of a comment',
    'longDescription': 'This rule aims to enforce a consistent style of comments across your codebase, specifically by either requiring or disallowing a capitalized letter as the first word character in a comment. This rule will not issue warnings when non-cased letters are used.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'comma-dangle',
    'options': [
      {
        'id': 'cjp1838u8pntm0a03h8eqikiz',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'never',
          'always',
          'always-multiline',
          'only-multiline',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow trailing commas',
    'longDescription': 'This rule enforces consistent use of trailing commas in object and array literals.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'comma-spacing',
    'options': [
      {
        'id': 'cjowinxa125lu0a75qlt8p8l8',
        'type': 'boolean',
        'name': 'before',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces before commas.',
        'options': [],
      },
      {
        'id': 'cjowinxa325lw0a75uv8nz9if',
        'type': 'boolean',
        'name': 'after',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces after commas.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before and after commas',
    'longDescription': 'This rule enforces consistent spacing before and after commas in variable declarations, array literals, object literals, function parameters, and sequences.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'comma-style',
    'options': [
      {
        'id': 'cjowiny1t25mm0a75nashg7v9',
        'type': 'select',
        'name': '',
        'value': 'first',
        'defaultValue': 'first',
        'description': null,
        'options': [
          'first',
          'last',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent comma style',
    'longDescription': 'This rule enforce consistent comma style in array literals, object literals, and variable declarations.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'computed-property-spacing',
    'options': [
      {
        'id': 'cjowinytm25nb0a75h6x5hnyy',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing inside computed property brackets',
    'longDescription': 'This rule enforces consistent spacing inside computed property brackets.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'consistent-this',
    'options': [
      {
        'id': 'cjp189uc5pp370a03bgmm6f8l',
        'type': 'select',
        'name': '',
        'value': 'that',
        'defaultValue': 'that',
        'description': null,
        'options': [
          'that',
          'this',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent naming when capturing the current execution context',
    'longDescription': 'This rule enforces two things about variables with the designated alias names for this:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'eol-last',
    'options': [
      {
        'id': 'cjowio0d825or0a759rn6z3js',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
          'unix',
          'windows',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow newline at the end of files',
    'longDescription': 'This rule enforces at least one newline (or absence thereof) at the end\nof non-empty files.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'func-call-spacing',
    'options': [
      {
        'id': 'cjp18b24apq0d0a03gfyvdr0s',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow spacing between function identifiers and their invocations',
    'longDescription': 'This rule requires or disallows spaces between the function name and the opening parenthesis that calls it.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'func-name-matching',
    'options': [
      {
        'id': 'cjp3whspeveur0a03wnw3zvr8',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
      {
        'id': 'cjp3wi2qevf0p0a03cmgksgos',
        'type': 'boolean',
        'name': 'considerPropertyDescriptor',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Checks also Object.create, Object.defineProperty, Object.defineProperties, and Reflect.defineProperty.',
        'options': [],
      },
      {
        'id': 'cjp3wi7o2vf3i0a037ojofiob',
        'type': 'boolean',
        'name': 'includeCommonJSModuleExports',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Checks also module.exports and module["exports"].',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require function names to match the name of the variable or property to which they are assigned',
    'longDescription': 'This rule requires function names to match the name of the variable or property to which they are assigned. The rule will ignore property assignments where the property name is a literal that is not a valid identifier in the ECMAScript version specified in your configuration (default ES5).',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'func-names',
    'options': [
      {
        'id': 'cjp18ch8kpqxt0a03yi678rai',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'as-needed',
          'never',
        ],
      },
      {
        'id': 'cjp18d81xpr740a03sahr3yg2',
        'type': 'select',
        'name': 'generators',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'as-needed',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow named function expressions',
    'longDescription': 'This rule can enforce or disallow the use of named function expressions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'func-style',
    'options': [
      {
        'id': 'cjowio3g925r10a75jn048rlr',
        'type': 'select',
        'name': '',
        'value': 'expression',
        'defaultValue': 'expression',
        'description': null,
        'options': [
          'expression',
          'declaration',
        ],
      },
      {
        'id': 'cjowio3gf25r30a75a52g03wo',
        'type': 'boolean',
        'name': 'allowArrowFunctions',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows the use of arrow functions.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce the consistent use of either function declarations or expressions',
    'longDescription': 'This rule enforces a particular type of function style throughout a JavaScript file, either declarations or expressions. You can specify which you prefer in the configuration.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'function-paren-newline',
    'options': [
      {
        'id': 'cjp18f6yaprkl0a03963t6hiu',
        'type': 'select',
        'name': '',
        'value': 'consistent',
        'defaultValue': 'consistent',
        'description': null,
        'options': [
          'always',
          'never',
          'multiline',
          'consistent',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent line breaks inside function parentheses',
    'longDescription': 'This rule enforces consistent line breaks inside parentheses of function parameters or arguments.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'id-blacklist',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow specified identifiers',
    'longDescription': 'This rule disallows specified identifiers in assignments and function definitions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'id-length',
    'options': [
      {
        'id': 'cjp18iww9ps4x0a03foi2suig',
        'type': 'select',
        'name': 'properties',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
      {
        'id': 'cjp3xnj0jvwa10a03hp6w9qm5',
        'type': 'number',
        'name': 'min',
        'value': '2',
        'defaultValue': '2',
        'description': 'Specifies a minimum identifier length.',
        'options': [],
      },
      {
        'id': 'cjp3xnsixvwet0a03yaq5lb8c',
        'type': 'number',
        'name': 'max',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a maximum identifier length.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce minimum and maximum identifier lengths',
    'longDescription': 'This rule enforces a minimum and/or maximum identifier length convention.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'id-match',
    'options': [
      {
        'id': 'cjowio6jf25u20a75pr9q9rfv',
        'type': 'boolean',
        'name': 'properties',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires object properties to match the specified regular expression.',
        'options': [],
      },
      {
        'id': 'cjowio6jj25u40a755y2zt8ju',
        'type': 'boolean',
        'name': 'onlyDeclarations',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires only var, function, and class declarations to match the specified regular expression.',
        'options': [],
      },
      {
        'id': 'cjowio6jl25u60a7523x842c7',
        'type': 'boolean',
        'name': 'ignoreDestructuring',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores destructured identifiers.',
        'options': [],
      },
      {
        'id': 'cjp18gyoxprx10a03cn91mz8c',
        'type': 'string',
        'name': '',
        'value': '^.+$',
        'defaultValue': '^.+$',
        'description': 'Specifies a regular expression to check identifiers that match a pattern.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require identifiers to match a specified regular expression',
    'longDescription': 'This rule requires identifiers in assignments and function definitions to match a specified regular expression.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'implicit-arrow-linebreak',
    'options': [
      {
        'id': 'cjowio7b825v30a755hbfvwh4',
        'type': 'select',
        'name': '',
        'value': 'beside',
        'defaultValue': 'beside',
        'description': null,
        'options': [
          'beside',
          'below',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce the location of arrow function bodies',
    'longDescription': 'This rule aims to enforce a consistent location for an arrow function containing an implicit return.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'indent',
    'options': [
      {
        'id': 'cjp3y2jzqw1ke0a03ly81whun',
        'type': 'boolean',
        'name': 'flatTernaryExpressions',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires no indentation for ternary expressions which are nested in other ternary expressions.',
        'options': [],
      },
      {
        'id': 'cjp3y2or3w1nx0a030ssqm44s',
        'type': 'boolean',
        'name': 'ignoreComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores comments.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent indentation',
    'longDescription': 'This rule enforces a consistent indentation style. The default style is 4 spaces.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'jsx-quotes',
    'options': [
      {
        'id': 'cjowio8ur25wo0a75rxo4pp1n',
        'type': 'select',
        'name': '',
        'value': 'prefer-double',
        'defaultValue': 'prefer-double',
        'description': null,
        'options': [
          'prefer-single',
          'prefer-double',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce the consistent use of either double or single quotes in JSX attributes',
    'longDescription': 'This rule enforces the consistent use of either double or single quotes in JSX attributes.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'key-spacing',
    'options': [
      {
        'id': 'cjp1dmuu9rmai0a03wqx9dn5w',
        'type': 'boolean',
        'name': 'beforeColon',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires at least one space between the key and the colon in object literals.',
        'options': [],
      },
      {
        'id': 'cjp1dnqrprmol0a0391qas0y6',
        'type': 'boolean',
        'name': 'afterColon',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires at least one space between the colon and the value in object literals.',
        'options': [],
      },
      {
        'id': 'cjp1doqkern9o0a034cylcy10',
        'type': 'select',
        'name': 'mode',
        'value': 'strict',
        'defaultValue': 'strict',
        'description': null,
        'options': [
          'strict',
          'minimum',
        ],
      },
      {
        'id': 'cjp1dp6vqrnot0a03emz6x3wl',
        'type': 'select',
        'name': 'align',
        'value': 'value',
        'defaultValue': 'value',
        'description': null,
        'options': [
          'value',
          'colon',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing between keys and values in object literal properties',
    'longDescription': 'This rule enforces consistent spacing between keys and values in object literal properties. In the case of long lines, it is acceptable to add a new line wherever whitespace is allowed.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'keyword-spacing',
    'options': [
      {
        'id': 'cjowioaea25y10a75v3t7zay8',
        'type': 'boolean',
        'name': 'before',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires at least one space before keywords.',
        'options': [],
      },
      {
        'id': 'cjowioaec25y30a7522l3k0py',
        'type': 'boolean',
        'name': 'after',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires at least one space after keywords.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before and after keywords',
    'longDescription': 'This rule enforces consistent spacing around keywords and keyword-like tokens: as (in module declarations), async (of async functions), await (of await expressions), break, case, catch, class, const, continue, debugger, default, delete, do, else, export, extends, finally, for, from (in module declarations), function, get (of getters), if, import, in, instanceof, let, new, of (in for-of statements), return, set (of setters), static, super, switch, this, throw, try, typeof, var, void, while, with, and yield. This rule is designed carefully not to conflict with other spacing rules: it does not apply to spacing where other rules report problems.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'line-comment-position',
    'options': [
      {
        'id': 'cjp1dwelqrqos0a03nhfks2y1',
        'type': 'select',
        'name': 'position',
        'value': 'above',
        'defaultValue': 'above',
        'description': null,
        'options': [
          'above',
          'beside',
        ],
      },
      {
        'id': 'cjp1dxqzsrqtg0a037ifgcrqi',
        'type': 'string',
        'name': 'ignorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore comments that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjp1dyhnwrqwe0a038cevxxds',
        'type': 'boolean',
        'name': 'applyDefaultIgnorePatterns',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Applies default ignore patterns even if ignorePattern is provided.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce position of line comments',
    'longDescription': 'This rule enforces consistent position of line comments. Block comments are not affected by this rule. By default, this rule ignores comments starting with the following words: eslint, jshint, jslint, istanbul, global, exported, jscs, falls through.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'linebreak-style',
    'options': [
      {
        'id': 'cjowiobxt25zz0a759kcfafev',
        'type': 'select',
        'name': '',
        'value': 'unix',
        'defaultValue': 'unix',
        'description': null,
        'options': [
          'unix',
          'windows',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent linebreak style',
    'longDescription': 'This rule enforces consistent line endings independent of operating system, VCS, or editor used across your codebase.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'lines-around-comment',
    'options': [
      {
        'id': 'cjowiocpn260r0a75peutc5de',
        'type': 'boolean',
        'name': 'beforeBlockComment',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires an empty line before block comments.',
        'options': [],
      },
      {
        'id': 'cjowiocpq260t0a75b7sf7pqw',
        'type': 'boolean',
        'name': 'afterBlockComment',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires an empty line after block comments.',
        'options': [],
      },
      {
        'id': 'cjowiocpr260v0a75r2ve814f',
        'type': 'boolean',
        'name': 'beforeLineComment',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires an empty line before line comments.',
        'options': [],
      },
      {
        'id': 'cjowiocpt260x0a755qv2im8g',
        'type': 'boolean',
        'name': 'afterLineComment',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires an empty line after line comments.',
        'options': [],
      },
      {
        'id': 'cjowiocpv260z0a75mh85ryyv',
        'type': 'boolean',
        'name': 'allowBlockStart',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the start of block statements.',
        'options': [],
      },
      {
        'id': 'cjowiocpw26110a75f0tx7dtm',
        'type': 'boolean',
        'name': 'allowBlockEnd',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the end of block statements.',
        'options': [],
      },
      {
        'id': 'cjowiocpy26130a75d11ac0wp',
        'type': 'boolean',
        'name': 'allowClassStart',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the start of classes.',
        'options': [],
      },
      {
        'id': 'cjowiocq026150a75fb30ditx',
        'type': 'boolean',
        'name': 'allowClassEnd',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the end of classes.',
        'options': [],
      },
      {
        'id': 'cjowiocq226170a75zkchvaii',
        'type': 'boolean',
        'name': 'allowObjectStart',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the start of object literals.',
        'options': [],
      },
      {
        'id': 'cjowiocq326190a75230a2i83',
        'type': 'boolean',
        'name': 'allowObjectEnd',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the end of object literals.',
        'options': [],
      },
      {
        'id': 'cjowiocq5261b0a75wcd3uvrd',
        'type': 'boolean',
        'name': 'allowArrayStart',
        'value': 'false',
        'defaultValue': 'false',
        'description': ' allows comments to appear at the start of array literals.',
        'options': [],
      },
      {
        'id': 'cjowiocq7261d0a755o03ybz1',
        'type': 'boolean',
        'name': 'allowArrayEnd',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows comments to appear at the end of array literals.',
        'options': [],
      },
      {
        'id': 'cjowiocq8261f0a75lpp4v2hs',
        'type': 'string',
        'name': 'ignorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore comments that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjowiocqa261h0a7500x0avq1',
        'type': 'boolean',
        'name': 'applyDefaultIgnorePatterns',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Applies default ignore patterns even if ignorePattern is provided.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require empty lines around comments',
    'longDescription': 'This rule requires empty lines before and/or after comments. It can be enabled separately for both block (/*) and line (//) comments. This rule does not apply to comments that appear on the same line as code and does not require empty lines at the beginning or end of a file.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'lines-between-class-members',
    'options': [
      {
        'id': 'cjowiodhd262b0a756vdauir0',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
      {
        'id': 'cjowiodhi262d0a75qr0hhfz6',
        'type': 'boolean',
        'name': 'exceptAfterSingleLine',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Skips checking empty lines after single-line class members.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow an empty line between class members',
    'longDescription': 'Examples of incorrect code for this rule:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'max-depth',
    'options': [
      {
        'id': 'cjp450glqyzed0a03j9ubc673',
        'type': 'number',
        'name': '',
        'value': '4',
        'defaultValue': '4',
        'description': 'Specifies a maximum depth that blocks can be nested.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum depth that blocks can be nested',
    'longDescription': 'This rule enforces a maximum depth that blocks can be nested to reduce code complexity.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-len',
    'options': [
      {
        'id': 'cjowiof0z263i0a754bbmv6w9',
        'type': 'string',
        'name': 'ignorePattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore lines that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjowiof10263k0a75cjnfyiy8',
        'type': 'boolean',
        'name': 'ignoreComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores all trailing comments and comments on their own line.',
        'options': [],
      },
      {
        'id': 'cjowiof12263m0a75oxs9za32',
        'type': 'boolean',
        'name': 'ignoreStrings',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines that contain a double-quoted or single-quoted string.',
        'options': [],
      },
      {
        'id': 'cjowiof14263o0a759o9sweoy',
        'type': 'boolean',
        'name': 'ignoreUrls',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines that contain a URL.',
        'options': [],
      },
      {
        'id': 'cjowiof15263q0a75hhqpagaq',
        'type': 'boolean',
        'name': 'ignoreTemplateLiterals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines that contain a template literal.',
        'options': [],
      },
      {
        'id': 'cjowiof17263s0a75g9e29ydf',
        'type': 'boolean',
        'name': 'ignoreRegExpLiterals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines that contain a RegExp literal.',
        'options': [],
      },
      {
        'id': 'cjowiof18263u0a75nr069fg4',
        'type': 'boolean',
        'name': 'ignoreTrailingComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores only trailing comments.',
        'options': [],
      },
      {
        'id': 'cjp451sdcyzw30a0358y1ynnp',
        'type': 'number',
        'name': 'code',
        'value': '80',
        'defaultValue': '80',
        'description': 'Specifies a maximum line length.',
        'options': [],
      },
      {
        'id': 'cjp451zycyzyo0a039avce8nz',
        'type': 'number',
        'name': 'tabWidth',
        'value': '4',
        'defaultValue': '4',
        'description': 'Specifies the character width for tab characters.',
        'options': [],
      },
      {
        'id': 'cjp452h21z04b0a03l98iu6vg',
        'type': 'number',
        'name': 'comments',
        'value': '80',
        'defaultValue': '80',
        'description': 'Specifies a maximum line length for comments.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum line length',
    'longDescription': 'This rule enforces a maximum line length to increase code readability and maintainability. The length of a line is defined as the number of Unicode characters in the line.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-lines',
    'options': [
      {
        'id': 'cjp1e43kurtqq0a03aw78q3f6',
        'type': 'boolean',
        'name': 'skipBlankLines',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines made up purely of whitespace.',
        'options': [],
      },
      {
        'id': 'cjp1e476irtu10a03l67c2pud',
        'type': 'boolean',
        'name': 'skipComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines containing just comments.',
        'options': [],
      },
      {
        'id': 'cjp454yttz14y0a03enm9w0do',
        'type': 'number',
        'name': 'max',
        'value': '300',
        'defaultValue': '300',
        'description': 'Specifies a maximum number of lines in a file.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum number of lines per file',
    'longDescription': 'This rule enforces a maximum number of lines per file, in order to aid in maintainability and reduce complexity.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-lines-per-function',
    'options': [
      {
        'id': 'cjp1e54s6ruaq0a03c2m9xl72',
        'type': 'boolean',
        'name': 'skipBlankLines',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines made up purely of whitespace.',
        'options': [],
      },
      {
        'id': 'cjp1e58i5rubs0a03f8uflrop',
        'type': 'boolean',
        'name': 'skipComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores lines containing just comments.',
        'options': [],
      },
      {
        'id': 'cjp1e5d73rudv0a03eucstt49',
        'type': 'boolean',
        'name': 'IIFEs',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Includes any code included in IIFEs.',
        'options': [],
      },
      {
        'id': 'cjp455yjfz1jm0a03qu6y15p5',
        'type': 'number',
        'name': 'max',
        'value': '50',
        'defaultValue': '50',
        'description': 'Specifies a maximum number of lines in a function.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum number of line of code in a function',
    'longDescription': 'This rule enforces a maximum number of lines per function, in order to aid in maintainability and reduce complexity.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-nested-callbacks',
    'options': [
      {
        'id': 'cjp456ubpz1z40a03wtxybnzx',
        'type': 'number',
        'name': 'max',
        'value': '3',
        'defaultValue': '3',
        'description': 'Specifies a maximum depth that callbacks can be nested.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum depth that callbacks can be nested',
    'longDescription': 'This rule enforces a maximum depth that callbacks can be nested to increase code clarity.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-params',
    'options': [
      {
        'id': 'cjp457fpdz2a50a03h2kp3h19',
        'type': 'number',
        'name': 'max',
        'value': '3',
        'defaultValue': '3',
        'description': 'Specifies a maximum number of parameters in function definitions.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum number of parameters in function definitions',
    'longDescription': 'This rule enforces a maximum number of parameters allowed in function definitions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-statements',
    'options': [
      {
        'id': 'cjowioivt266t0a758ydjctv5',
        'type': 'boolean',
        'name': 'ignoreTopLevelFunctions',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores top-level functions.',
        'options': [],
      },
      {
        'id': 'cjp457v6ez2kx0a03zzhym6vd',
        'type': 'number',
        'name': 'max',
        'value': '10',
        'defaultValue': '10',
        'description': 'Specifies a maximum number of statements allows in function blocks.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum number of statements allowed in function blocks',
    'longDescription': 'This rule enforces a maximum number of statements allowed in function blocks.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'max-statements-per-line',
    'options': [
      {
        'id': 'cjp458pklz32p0a03uvnp6vmi',
        'type': 'number',
        'name': 'max',
        'value': '1',
        'defaultValue': '1',
        'description': 'Specifies a maximum number of statements allowed per line.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a maximum number of statements allowed per line',
    'longDescription': 'This rule enforces a maximum number of statements allowed per line.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'multiline-comment-style',
    'options': [
      {
        'id': 'cjowiomwi26ac0a75dlzk2f5k',
        'type': 'select',
        'name': '',
        'value': 'starred-block',
        'defaultValue': 'starred-block',
        'description': null,
        'options': [
          'starred-block',
          'separate-lines',
          'bare-block',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce a particular style for multiline comments',
    'longDescription': 'This rule aims to enforce a particular style for multiline comments.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'multiline-ternary',
    'options': [
      {
        'id': 'cjowiomwi26ac0a754zzqco3v',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'always-multiline',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce newlines between operands of ternary expressions',
    'longDescription': 'This rule enforces or disallows newlines between operands of a ternary expression.\nNote: The location of the operators is not enforced by this rule. Please see the operator-linebreak rule if you are interested in enforcing the location of the operators themselves.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'new-cap',
    'options': [
      {
        'id': 'cjowioni826aw0a750bfhxb13',
        'type': 'boolean',
        'name': 'newIsCap',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires all new operators to be called with uppercase-started functions.',
        'options': [],
      },
      {
        'id': 'cjowionic26ay0a755qe27ymg',
        'type': 'boolean',
        'name': 'capIsNew',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires all uppercase-started functions to be called with new operators.',
        'options': [],
      },
      {
        'id': 'cjowionie26b00a75f6ewd1up',
        'type': 'string',
        'name': 'newIsCapExceptionPattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore lowercase-started function names that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjowionii26b20a758ewgc3d9',
        'type': 'string',
        'name': 'capIsNewExceptionPattern',
        'value': '',
        'defaultValue': '',
        'description': 'Specifies a regular expression to ignore uppercase-started function names that match a pattern.',
        'options': [],
      },
      {
        'id': 'cjowionik26b40a753mktveeg',
        'type': 'boolean',
        'name': 'properties',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Enables checks on object properties.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require constructor names to begin with a capital letter',
    'longDescription': 'This rule requires constructor names to begin with a capital letter. Certain built-in identifiers are exempt from this rule. These identifiers are:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'new-parens',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require parentheses when invoking a constructor with no arguments',
    'longDescription': 'This rule requires parentheses when invoking a constructor with no arguments using the new keyword in order to increase code clarity.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'newline-per-chained-call',
    'options': [
      {
        'id': 'cjp59z10v3vpu0a66rc60zz4g',
        'type': 'number',
        'name': 'ignoreChainWithDepth',
        'value': '2',
        'defaultValue': '2',
        'description': 'Specifies a number of allowed chains up depth.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require a newline after each call in a method chain',
    'longDescription': 'This rule requires a newline after each call in a method chain or deep member access. Computed property accesses such as instance[something] are excluded.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-array-constructor',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow Array constructors',
    'longDescription': 'This rule disallows Array constructors.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-bitwise',
    'options': [
      {
        'id': 'cjowioqln26db0a75mvfgzepw',
        'type': 'boolean',
        'name': 'int32Hint',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows the use of bitwise OR in |0 pattern for type casting.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow bitwise operators',
    'longDescription': 'This rule disallows bitwise operators.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-continue',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow continue statements',
    'longDescription': 'This rule disallows continue statements.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-inline-comments',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow inline comments after code',
    'longDescription': 'This rule disallows comments on the same line as code.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-lonely-if',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow if statements as the only statement in else blocks',
    'longDescription': 'This rule disallows if statements as the only statement in else blocks.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-mixed-operators',
    'options': [
      {
        'id': 'cjowiotoo26g70a75efd7rd0n',
        'type': 'boolean',
        'name': 'allowSamePrecedence',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Allows mixed operators if they are of equal precedence.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow mixed binary operators',
    'longDescription': 'This rule checks BinaryExpression and LogicalExpression.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-mixed-spaces-and-tabs',
    'options': [
      {
        'id': 'cjowiougj26gx0a7512nfybin',
        'type': 'select',
        'name': '',
        'value': 'smart-tabs',
        'defaultValue': 'smart-tabs',
        'description': null,
        'options': [
          'smart-tabs',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow mixed spaces and tabs for indentation',
    'longDescription': 'This rule disallows mixed spaces and tabs for indentation.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-multi-assign',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow use of chained assignment expressions',
    'longDescription': 'This rule disallows using multiple assignments within a single statement.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-multiple-empty-lines',
    'options': [
      {
        'id': 'cjp5a73003xqu0a664kvjfuto',
        'type': 'number',
        'name': 'max',
        'value': '2',
        'defaultValue': '2',
        'description': 'Specifies a maximum number of consecutive empty lines.',
        'options': [],
      },
      {
        'id': 'cjp5a7fzi4xli0a669jhud32c',
        'type': 'number',
        'name': 'maxEOF',
        'value': '2',
        'defaultValue': '2',
        'description': 'Specifies a maximum number of consecutive empty lines at the end of files.',
        'options': [],
      },
      {
        'id': 'cjp5a7kta4xm50a669o6vcfz0',
        'type': 'number',
        'name': 'maxBOF',
        'value': '2',
        'defaultValue': '2',
        'description': 'Specifies a maximum number of consecutive empty lines at the beginning of files.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow multiple empty lines',
    'longDescription': 'This rule aims to reduce the scrolling required when reading through your code. It will warn when the maximum amount of empty lines has been exceeded.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-negated-condition',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow negated conditions',
    'longDescription': 'This rule disallows negated conditions in either of the following:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-nested-ternary',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow nested ternary expressions',
    'longDescription': 'The no-nested-ternary rule disallows nested ternary expressions.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new-object',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow Object constructors',
    'longDescription': 'This rule disallows Object constructors.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-plusplus',
    'options': [
      {
        'id': 'cjowioz3626kz0a751v9q4pm7',
        'type': 'boolean',
        'name': 'allowForLoopAfterthoughts',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows unary operators ++ and -- in the afterthought (final expression) of a for loop.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow the unary operators ++ and --',
    'longDescription': 'This rule disallows the unary operators ++ and --.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-restricted-syntax',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow specified syntax',
    'longDescription': 'This rule disallows specified (that is, user-defined) syntax.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-tabs',
    'options': [
      {
        'id': 'cjowip0mq26mg0a754ye2gz6g',
        'type': 'boolean',
        'name': 'allowIndentationTabs',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows tabs used for indentation.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow all tabs',
    'longDescription': 'This rule looks for tabs anywhere inside a file: code, comments or anything else.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-ternary',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow ternary operators',
    'longDescription': 'This rule disallows ternary operators.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-trailing-spaces',
    'options': [
      {
        'id': 'cjowip26a26o00a75l6757tde',
        'type': 'boolean',
        'name': 'skipBlankLines',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows trailing whitespace on empty lines.',
        'options': [],
      },
      {
        'id': 'cjowip26b26o20a75tpwkz2sp',
        'type': 'boolean',
        'name': 'ignoreComments',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows trailing whitespace in comment blocks.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow trailing whitespace at the end of lines',
    'longDescription': 'This rule disallows trailing whitespace (spaces, tabs, and other Unicode whitespace characters) at the end of lines.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-underscore-dangle',
    'options': [
      {
        'id': 'cjowip2y226oo0a75jqon6lqb',
        'type': 'boolean',
        'name': 'allowAfterThis',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows dangling underscores in members of the this object.',
        'options': [],
      },
      {
        'id': 'cjowip2y426oq0a75ggygid8f',
        'type': 'boolean',
        'name': 'allowAfterSuper',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows dangling underscores in members of the super object.',
        'options': [],
      },
      {
        'id': 'cjowip2y526os0a75bfbv0lui',
        'type': 'boolean',
        'name': 'enforceInMethodNames',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Disallows dangling underscores in method names.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow dangling underscores in identifiers',
    'longDescription': 'This rule disallows dangling underscores in identifiers.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-unneeded-ternary',
    'options': [
      {
        'id': 'cjowip3pu26pc0a75uq4968z2',
        'type': 'boolean',
        'name': 'defaultAssignment',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Allows the conditional expression as a default assignment pattern.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow ternary operators when simpler alternatives exist',
    'longDescription': 'This rule disallow ternary operators when simpler alternatives exist.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-whitespace-before-property',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow whitespace before properties',
    'longDescription': 'This rule disallows whitespace around the dot or before the opening bracket before properties of objects if they are on the same line. This rule allows whitespace when the object and property are on separate lines, as it is common to add newlines to longer chains of properties:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'nonblock-statement-body-position',
    'options': [
      {
        'id': 'cjowip59d26qi0a75bl5e3fir',
        'type': 'select',
        'name': '',
        'value': 'beside',
        'defaultValue': 'beside',
        'description': null,
        'options': [
          'beside',
          'below',
          'any',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce the location of single-line statements',
    'longDescription': 'This rule aims to enforce a consistent location for single-line statements.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'object-curly-newline',
    'options': [
      {
        'id': 'cjp1xal0u06zg0a03cwaij11g',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent line breaks inside braces',
    'longDescription': 'This rule enforces consistent line breaks inside braces of object literals or destructuring assignments.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'object-curly-spacing',
    'options': [
      {
        'id': 'cjowip6sy26rr0a75sm9p36p1',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing inside braces',
    'longDescription': 'This rule enforce consistent spacing inside braces of object literals, destructuring assignments, and import/export specifiers.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'object-property-newline',
    'options': [
      {
        'id': 'cjowip7ks26sj0a75jzg0zo9h',
        'type': 'boolean',
        'name': 'allowAllPropertiesOnSameLine',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows all property specifications on the same line.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce placing object properties on separate lines',
    'longDescription': 'This rule makes it possible to ensure, as some style guides require, that property specifications appear on separate lines for better readability.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'one-var',
    'options': [
      {
        'id': 'cjp1xcs9l077n0a032nokcol0',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
          'consecutive',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce variables to be declared either together or separately in functions',
    'longDescription': 'This rule enforces variables to be declared either together or separately per function ( for var) or block (for let and const) scope.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'one-var-declaration-per-line',
    'options': [
      {
        'id': 'cjowip94a26tt0a75c6in1424',
        'type': 'select',
        'name': '',
        'value': 'initializations',
        'defaultValue': 'initializations',
        'description': null,
        'options': [
          'always',
          'initializations',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow newlines around variable declarations',
    'longDescription': 'This rule enforces a consistent newlines around variable declarations. This rule ignores variable declarations inside for loop conditionals.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'operator-assignment',
    'options': [
      {
        'id': 'cjowip9w126um0a75syne3p4c',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow assignment operator shorthand where possible',
    'longDescription': 'This rule requires or disallows assignment operator shorthand where possible.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'operator-linebreak',
    'options': [
      {
        'id': 'cjowipanv26v80a75uwwul9ct',
        'type': 'select',
        'name': '',
        'value': 'after',
        'defaultValue': 'after',
        'description': null,
        'options': [
          'after',
          'before',
          'none',
          'null',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent linebreak style for operators',
    'longDescription': 'This rule enforces a consistent linebreak style for operators.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'padded-blocks',
    'options': [
      {
        'id': 'cjp1xfdse07ga0a03084kuilf',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow padding within blocks',
    'longDescription': 'This rule enforces consistent empty line padding within blocks.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'padding-line-between-statements',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow padding lines between statements',
    'longDescription': 'This rule does nothing if no configurations are provided.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-object-spread',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Disallow using Object.assign with an object literal as the first argument and prefer the use of object spread instead',
    'longDescription': 'Examples of incorrect code for this rule:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'quote-props',
    'options': [
      {
        'id': 'cjp1xh14b07pp0a03tfa9b106',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'as-needed',
          'consistent',
          'consistent-as-needed',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require quotes around object literal property names',
    'longDescription': 'This rule requires quotes around object literal property names.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'quotes',
    'options': [
      {
        'id': 'cjowipeis26yi0a75ylwynsb0',
        'type': 'select',
        'name': '',
        'value': 'double',
        'defaultValue': 'double',
        'description': null,
        'options': [
          'single',
          'double',
          'backtick',
        ],
      },
      {
        'id': 'cjp1xjcn4091t0a03o8q9x1y5',
        'type': 'boolean',
        'name': 'avoidEscape',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows strings to use single-quotes or double-quotes so long as the string contains a quote that would have to be escaped otherwise.',
        'options': [],
      },
      {
        'id': 'cjp1xjedm092o0a03gildalna',
        'type': 'boolean',
        'name': 'allowTemplateLiterals',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows strings to use backticks.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce the consistent use of either backticks, double, or single quotes',
    'longDescription': 'This rule enforces the consistent use of either backticks, double, or single quotes.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'require-jsdoc',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require JSDoc comments',
    'longDescription': 'This rule requires JSDoc comments for specified nodes. Supported nodes:.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'semi',
    'options': [
      {
        'id': 'cjp2lrm9obx440a03q6lytu8d',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow semicolons instead of ASI',
    'longDescription': 'This rule enforces consistent use of semicolons.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'semi-spacing',
    'options': [
      {
        'id': 'cjowipgu3270d0a756epqpocu',
        'type': 'boolean',
        'name': 'before',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Enforce to have a space before semicolons.',
        'options': [],
      },
      {
        'id': 'cjowipgu5270h0a75k9wfpq5h',
        'type': 'boolean',
        'name': 'after',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Enforce to have a space after semicolons.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before and after semicolons',
    'longDescription': 'This rule aims to enforce spacing around a semicolon. This rule prevents the use of spaces before a semicolon in expressions.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'semi-style',
    'options': [
      {
        'id': 'cjowiphlt270w0a75tlti85yl',
        'type': 'select',
        'name': '',
        'value': 'last',
        'defaultValue': 'last',
        'description': null,
        'options': [
          'last',
          'first',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce location of semicolons',
    'longDescription': 'This rule reports line terminators around semicolons.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'sort-keys',
    'options': [
      {
        'id': 'cjowipidn27160a7537qn9w7t',
        'type': 'select',
        'name': '',
        'value': 'asc',
        'defaultValue': 'asc',
        'description': null,
        'options': [
          'asc',
          'desc',
        ],
      },
      {
        'id': 'cjowipids27180a75wbqne130',
        'type': 'boolean',
        'name': 'caseSensitive',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Enforces properties to be in case-sensitive order.',
        'options': [],
      },
      {
        'id': 'cjowipidu271a0a75ck2g7d3h',
        'type': 'boolean',
        'name': 'natural',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Enforces properties to be in natural order.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require object keys to be sorted',
    'longDescription': 'This rule checks all property definitions of object expressions and verifies that all variables are sorted alphabetically.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'sort-vars',
    'options': [
      {
        'id': 'cjowipj5e271r0a75brj4q91q',
        'type': 'boolean',
        'name': 'ignoreCase',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores the case-sensitivity of the variables order.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require variables within the same declaration block to be sorted',
    'longDescription': 'This rule checks all variable declaration blocks and verifies that all variables are sorted alphabetically.\nThe default configuration of the rule is case-sensitive.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'space-before-blocks',
    'options': [
      {
        'id': 'cjp2ly3tkbzj00a03gtgqa6y6',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before blocks',
    'longDescription': 'This rule will enforce consistency of spacing before blocks. It is only applied on blocks that don’t begin on a new line.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'space-before-function-paren',
    'options': [
      {
        'id': 'cjp2lz5q8bzu60a03uj04hk5q',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before function definition opening parenthesis',
    'longDescription': 'This rule aims to enforce consistent spacing before function parentheses and as such, will warn whenever whitespace doesn’t match the preferences specified.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'space-in-parens',
    'options': [
      {
        'id': 'cjowiplgr272y0a75g0k2f7t0',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing inside parentheses',
    'longDescription': 'This rule will enforce consistency of spacing directly inside of parentheses, by disallowing or requiring one or more spaces to the right of ( and to the left of ). In either case, () will still be allowed.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'space-infix-ops',
    'options': [
      {
        'id': 'cjowipm8i273m0a75t5h8ckwd',
        'type': 'boolean',
        'name': 'int32Hint',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows writing a|0 without space.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require spacing around infix operators',
    'longDescription': 'This rule is aimed at ensuring there are spaces around infix operators.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'space-unary-ops',
    'options': [
      {
        'id': 'cjowipn0h27440a75ebfzzvmo',
        'type': 'boolean',
        'name': 'words',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Applies to unary word operators such as: new, delete, typeof, void, yield.',
        'options': [],
      },
      {
        'id': 'cjowipn0j27460a75c7wtvqkp',
        'type': 'boolean',
        'name': 'nonwords',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Applies to unary operators such as: -, +, --, ++, !, !!.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing before or after unary operators',
    'longDescription': 'This rule enforces consistency regarding the spaces after words unary operators and after/before nonwords unary operators.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'spaced-comment',
    'options': [
      {
        'id': 'cjowipns2274p0a751cyii7r6',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce consistent spacing after the // or /* in a comment',
    'longDescription': 'This rule will enforce consistency of spacing after the start of a comment // or /*. It also provides several\nexceptions for various documentation styles.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'switch-colon-spacing',
    'options': [
      {
        'id': 'cjowipojv27570a753fantb5v',
        'type': 'boolean',
        'name': 'before',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires one or more spaces before colons.',
        'options': [],
      },
      {
        'id': 'cjowipojy27590a7519hzbf46',
        'type': 'boolean',
        'name': 'after',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires one or more spaces after colons.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Enforce spacing around colons of switch statements',
    'longDescription': 'This rule controls spacing around colons of case and default clauses in switch statements.\nThis rule does the check only if the consecutive tokens exist on the same line.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'template-tag-spacing',
    'options': [
      {
        'id': 'cjowippbn275n0a75d9uswyh3',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow spacing between template tags and their literals',
    'longDescription': 'This rule aims to maintain consistency around the spacing between template tag functions and their template literals.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'unicode-bom',
    'options': [
      {
        'id': 'cjowipq3d275z0a75whtku1ld',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require or disallow Unicode byte order mark (BOM)',
    'longDescription': 'If the "always" option is used, this rule requires that files always begin\nwith the Unicode BOM character U+FEFF. If "never" is used, files must never\nbegin with U+FEFF.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'wrap-regex',
    'options': [],
    'value': 'warn',
    'category': 'Stylistic Issues',
    'shortDescription': 'Require parenthesis around regex literals',
    'longDescription': 'This is used to disambiguate the slash operator and facilitates more readable code.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'arrow-body-style',
    'options': [
      {
        'id': 'cjp2m43a7c2ii0a033viff3up',
        'type': 'select',
        'name': '',
        'value': 'as-needed',
        'defaultValue': 'as-needed',
        'description': null,
        'options': [
          'always',
          'as-needed',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require braces around arrow function bodies',
    'longDescription': 'This rule can enforce or disallow the use of braces around arrow function body.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'arrow-parens',
    'options': [
      {
        'id': 'cjowipseq277c0a75uueet79q',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'as-needed',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require parentheses around arrow function arguments',
    'longDescription': 'This rule enforces parentheses around arrow function parameters regardless of arity. For example:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'arrow-spacing',
    'options': [
      {
        'id': 'cjowipt6h277r0a756csg62hf',
        'type': 'boolean',
        'name': 'before',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires one or more spaces before arrow.',
        'options': [],
      },
      {
        'id': 'cjowipt6k277t0a754ipd4w2j',
        'type': 'boolean',
        'name': 'after',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires one or more spaces after arrow.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Enforce consistent spacing before and after the arrow in arrow functions',
    'longDescription': 'This rule takes an object argument with before and after properties, each with a Boolean value.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'constructor-super',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require super() calls in constructors',
    'longDescription': 'This rule is aimed to flag invalid/missing super() calls.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'generator-star-spacing',
    'options': [
      {
        'id': 'cjp444mayyjz00a0365ke3lt9',
        'type': 'boolean',
        'name': 'before',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires spacing between the * and the function keyword.',
        'options': [],
      },
      {
        'id': 'cjp444rliyk2z0a03azbc0ucr',
        'type': 'boolean',
        'name': 'after',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires spacing between the * and the function name.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Enforce consistent spacing around * operators in generator functions',
    'longDescription': 'This rule aims to enforce spacing around the * of generator functions.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-class-assign',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow reassigning class members',
    'longDescription': 'This rule is aimed to flag modifying variables of class declarations.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-confusing-arrow',
    'options': [
      {
        'id': 'cjowipw9n279f0a7522cvs1gv',
        'type': 'boolean',
        'name': 'allowParens',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows accepting parentheses.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow arrow functions where they could be confused with comparisons',
    'longDescription': 'Examples of incorrect code for this rule:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-const-assign',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow reassigning const variables',
    'longDescription': 'This rule is aimed to flag modifying variables that are declared using const keyword.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-dupe-class-members',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow duplicate class members',
    'longDescription': 'This rule is aimed to flag the use of duplicate names in class members.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-duplicate-imports',
    'options': [
      {
        'id': 'cjowipykz27ao0a75t7eut1sf',
        'type': 'boolean',
        'name': 'includeExports',
        'value': 'false',
        'defaultValue': 'false',
        'description': null,
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow duplicate module imports',
    'longDescription': 'This rules requires that all imports from a single module exists in a single import statement.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-new-symbol',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow new operators with the Symbol object',
    'longDescription': 'This rule is aimed at preventing the accidental calling of Symbol with the new operator.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-restricted-imports',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow specified modules when loaded by import',
    'longDescription': 'This rule allows you to specify imports that you don’t want to use in your application.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-this-before-super',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow this/super before calling super() in constructors',
    'longDescription': 'This rule is aimed to flag this/super keywords before super() callings.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'no-useless-computed-key',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow unnecessary computed property keys in object literals',
    'longDescription': 'This rule disallows unnecessary usage of computed property keys.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-useless-constructor',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow unnecessary constructors',
    'longDescription': 'This rule flags class constructors that can be safely removed without changing how the class works.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'no-useless-rename',
    'options': [
      {
        'id': 'cjowiq37l27d50a75wszkuwrf',
        'type': 'boolean',
        'name': 'ignoreDestructuring',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores destructuring assignments.',
        'options': [],
      },
      {
        'id': 'cjowiq37n27d70a75tb2grvb1',
        'type': 'boolean',
        'name': 'ignoreImport',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores imports.',
        'options': [],
      },
      {
        'id': 'cjowiq37q27d90a75jmdpx6zt',
        'type': 'boolean',
        'name': 'ignoreExport',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores exports.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow renaming import, export, and destructured assignments to the same name',
    'longDescription': 'This rule disallows the renaming of import, export, and destructured assignments to the same name.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'no-var',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require let or const instead of var',
    'longDescription': 'This rule is aimed at discouraging the use of var and encouraging the use of const or let instead.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'object-shorthand',
    'options': [
      {
        'id': 'cjp2m9m2hc3v50a03zaczpkf5',
        'type': 'select',
        'name': '',
        'value': 'always',
        'defaultValue': 'always',
        'description': null,
        'options': [
          'always',
          'methods',
          'properties',
          'never',
          'consistent',
          'consistent-as-needed',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require or disallow method and property shorthand syntax for object literals',
    'longDescription': 'This rule enforces the use of the shorthand syntax. This applies\nto all methods (including generators) defined in object literals and any\nproperties defined where the key name matches name of the assigned variable.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-arrow-callback',
    'options': [
      {
        'id': 'cjowiq5iy27e60a75g6adn7ko',
        'type': 'boolean',
        'name': 'allowNamedFunctions',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows the use of named functions without restriction.',
        'options': [],
      },
      {
        'id': 'cjowiq5j127e80a75sgg1mu8v',
        'type': 'boolean',
        'name': 'allowUnboundThis',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Allows function expressions containing this to be used as callbacks, as long as the function in question has not been explicitly bound.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require using arrow functions for callbacks',
    'longDescription': 'This rule locates function expressions used as callbacks or function arguments. An error will be produced for any that could be replaced by an arrow function without changing the result.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-const',
    'options': [
      {
        'id': 'cjowiq6ar27ep0a75efsg8ug6',
        'type': 'boolean',
        'name': 'ignoreReadBeforeAssign',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores variables that are read between the declaration and the first assignment.',
        'options': [],
      },
      {
        'id': 'cjp2mb8vgc43v0a033hqm30qm',
        'type': 'select',
        'name': 'destructuring',
        'value': 'any',
        'defaultValue': 'any',
        'description': null,
        'options': [
          'any',
          'all',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require const declarations for variables that are never reassigned after declared',
    'longDescription': 'This rule is aimed at flagging variables that are declared using let keyword, but never reassigned after the initial assignment.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-destructuring',
    'options': [
      {
        'id': 'cjowiq72j27f00a754vij2a67',
        'type': 'boolean',
        'name': 'enforceForRenamedProperties',
        'value': 'false',
        'defaultValue': 'false',
        'description': null,
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require destructuring from arrays and/or objects',
    'longDescription': 'This rule enforces usage of destructuring instead of accessing a property through a member expression.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'prefer-numeric-literals',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Disallow parseInt() and Number.parseInt() in favor of binary, octal, and hexadecimal literals',
    'longDescription': 'This rule disallows calls to parseInt() or Number.parseInt() if called with two arguments: a string; and a radix option of 2 (binary), 8 (octal), or 16 (hexadecimal).',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-rest-params',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require rest parameters instead of arguments',
    'longDescription': 'This rule is aimed to flag usage of arguments variables.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'prefer-spread',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require spread operators instead of .apply()',
    'longDescription': 'This rule is aimed to flag usage of Function.prototype.apply() in situations where the spread operator could be used instead.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'prefer-template',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require template literals instead of string concatenation',
    'longDescription': 'This rule is aimed to flag usage of + operators with strings.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'require-yield',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require generator functions to contain yield',
    'longDescription': 'This rule generates warnings for generator functions that do not have the yield keyword.',
    'isRecommended': true,
    'isFixable': false,
  },
  {
    'name': 'rest-spread-spacing',
    'options': [
      {
        'id': 'cjowiqe0h27hk0a754rvfelif',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Enforce spacing between rest and spread operators and their expressions',
    'longDescription': 'This rule aims to enforce consistent spacing between rest and spread operators and their expressions. The rule also supports object rest and spread properties in ES2018:.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'sort-imports',
    'options': [
      {
        'id': 'cjowiqesa27hw0a75xjp3rx2w',
        'type': 'boolean',
        'name': 'ignoreCase',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores the case-sensitivity of the imports local name.',
        'options': [],
      },
      {
        'id': 'cjowiqesc27hy0a75o63ifsoh',
        'type': 'boolean',
        'name': 'ignoreMemberSort',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Ignores the member sorting within a multiple member import declaration.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Enforce sorted import declarations within modules',
    'longDescription': 'This rule checks all import declarations and verifies that all imports are first sorted by the used member syntax and then alphabetically by the first member or alias name.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'symbol-description',
    'options': [],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require symbol descriptions',
    'longDescription': 'This rules requires a description when creating symbols.',
    'isRecommended': false,
    'isFixable': false,
  },
  {
    'name': 'template-curly-spacing',
    'options': [
      {
        'id': 'cjowiqgbt27iw0a75phjewq7d',
        'type': 'select',
        'name': '',
        'value': 'never',
        'defaultValue': 'never',
        'description': null,
        'options': [
          'always',
          'never',
        ],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require or disallow spacing around embedded expressions of template strings',
    'longDescription': 'This rule aims to maintain consistency around the spacing inside of template literals.',
    'isRecommended': false,
    'isFixable': true,
  },
  {
    'name': 'yield-star-spacing',
    'options': [
      {
        'id': 'cjp44qtdbyu9p0a030po7pg6c',
        'type': 'boolean',
        'name': 'before',
        'value': 'false',
        'defaultValue': 'false',
        'description': 'Requires spacing between the yield and the *.',
        'options': [],
      },
      {
        'id': 'cjp44qxlkyubj0a03yhakcmeh',
        'type': 'boolean',
        'name': 'after',
        'value': 'true',
        'defaultValue': 'true',
        'description': 'Requires spacing between the * and the argument.',
        'options': [],
      },
    ],
    'value': 'warn',
    'category': 'ECMAScript 6',
    'shortDescription': 'Require or disallow spacing around the * in yield* expressions',
    'longDescription': 'This rule enforces spacing around the * in yield* expressions.',
    'isRecommended': false,
    'isFixable': true,
  },
];